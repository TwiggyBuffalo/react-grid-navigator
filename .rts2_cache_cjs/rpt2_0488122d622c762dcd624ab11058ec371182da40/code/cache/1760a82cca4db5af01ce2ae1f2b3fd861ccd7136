{"code":"import { Container } from \"./context\";\r\nimport { getDirection, applyDirectionCoords, applyCellDimensionOffsets, isValidGrid } from \"./methods\";\r\nimport Cell from \"./Cell\";\r\nclass FocusEngine extends Container {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            coords: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            activeCellCoords: { x: 0, y: 0 },\r\n            grid: [],\r\n            cells: {},\r\n            activeCell: \"\"\r\n        };\r\n        this.cellFocusEvents = {};\r\n        this.cellBlurEvents = {};\r\n        this.cellIndexChangeEvents = {};\r\n        this.focusActions = {};\r\n    }\r\n    setGrid(gridNames, activeCell) {\r\n        let cells = {};\r\n        if (isValidGrid(gridNames)) {\r\n            let grid = gridNames.map((rows, yIndex) => {\r\n                return rows.map((cellName, xIndex) => {\r\n                    if (cells[cellName]) {\r\n                        cells[cellName].addGridPosition = { x: xIndex, y: yIndex };\r\n                        return cells[cellName];\r\n                    }\r\n                    else {\r\n                        cells[cellName] = new Cell(cellName, { x: xIndex, y: yIndex });\r\n                        return cells[cellName];\r\n                    }\r\n                });\r\n            });\r\n            return this.setState({\r\n                grid,\r\n                cells,\r\n                activeCell,\r\n                activeCellCoords: cells[activeCell].gridPositions[0]\r\n            });\r\n        }\r\n        else {\r\n            throw new Error(\"Provided grid is not valid\");\r\n        }\r\n    }\r\n    setActiveCell(newActiveCell, direction) {\r\n        const { cells, activeCell } = this.state;\r\n        this.cellFocusEvents[newActiveCell] &&\r\n            this.cellFocusEvents[newActiveCell]();\r\n        this.cellBlurEvents[activeCell] && this.cellBlurEvents[activeCell]();\r\n        this.setState({\r\n            activeCell: newActiveCell,\r\n            activeCellCoords: cells[newActiveCell].gridPositions[0],\r\n            coords: cells[newActiveCell].getNextLogicalIndex(direction)\r\n        });\r\n    }\r\n    addCellCoords(cell, coords) {\r\n        let { grid } = this.state;\r\n        let selectedCell = grid.reduce((acc, row) => {\r\n            if (!acc) {\r\n                return row.find((item) => item.name === cell);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }, null);\r\n        if (selectedCell) {\r\n            selectedCell.addCoords = coords;\r\n        }\r\n    }\r\n    addCellFocusEvent(cellName, func) {\r\n        this.cellFocusEvents[cellName] = func;\r\n    }\r\n    addCellBlurEvent(cellName, func) {\r\n        this.cellBlurEvents[cellName] = func;\r\n    }\r\n    addCellIndexChangeEvent(cellName, func) {\r\n        this.cellIndexChangeEvents[cellName] = func;\r\n    }\r\n    addFocusAction(index, cellName, func) {\r\n        this.focusActions[cellName + index.join()] = func;\r\n    }\r\n    onArrowUp() {\r\n        const { x, y } = this.state.coords;\r\n        if (this.pipeMove(x, y - 1)) {\r\n            this.setState({\r\n                coords: {\r\n                    x,\r\n                    y: y - 1\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onArrowDown() {\r\n        const { x, y } = this.state.coords;\r\n        if (this.pipeMove(x, y + 1)) {\r\n            this.setState({\r\n                coords: {\r\n                    x,\r\n                    y: y + 1\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onArrowLeft() {\r\n        const { x, y } = this.state.coords;\r\n        if (this.pipeMove(x - 1, y)) {\r\n            this.setState({\r\n                coords: {\r\n                    x: x - 1,\r\n                    y\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onArrowRight() {\r\n        const { x, y } = this.state.coords;\r\n        if (this.pipeMove(x + 1, y)) {\r\n            this.setState({\r\n                coords: {\r\n                    x: x + 1,\r\n                    y\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onEnter() {\r\n        const { coords, activeCell } = this.state;\r\n        this.focusActions[activeCell + [coords.x, coords.y].join()] &&\r\n            this.focusActions[activeCell + [coords.x, coords.y].join()]();\r\n    }\r\n    pipeMove(nX, nY) {\r\n        const { coords } = this.state;\r\n        let newCoords = {\r\n            nX,\r\n            nY,\r\n            direction: getDirection(nX, nY, coords.x, coords.y)\r\n        };\r\n        return this.applyNavLogic(newCoords);\r\n    }\r\n    applyNavLogic(newCoords) {\r\n        const { cells, activeCell } = this.state;\r\n        const { maxes } = cells[activeCell];\r\n        const { coords } = this.state;\r\n        const { nX, nY, direction } = newCoords;\r\n        const { xMaxes, yMaxes } = maxes;\r\n        let canMove = false;\r\n        if (direction === \"x\") {\r\n            if (xMaxes[coords.y] < nX) {\r\n                canMove = false;\r\n                this.tryNavigateToNewCell(newCoords);\r\n            }\r\n            else {\r\n                canMove = true;\r\n            }\r\n        }\r\n        if (direction === \"-x\") {\r\n            if (nX >= 0) {\r\n                canMove = true;\r\n            }\r\n            else {\r\n                canMove = false;\r\n                this.tryNavigateToNewCell(newCoords);\r\n            }\r\n        }\r\n        if (direction === \"y\") {\r\n            if (yMaxes[coords.x] < nY) {\r\n                if (xMaxes[nY] < xMaxes[coords.y] && coords.x > xMaxes[nY]) {\r\n                    if (xMaxes[nY]) {\r\n                        canMove = false;\r\n                        this.setState({\r\n                            coords: {\r\n                                x: xMaxes[nY],\r\n                                y: nY\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    canMove = false;\r\n                    this.tryNavigateToNewCell(newCoords);\r\n                }\r\n            }\r\n            else {\r\n                canMove = true;\r\n            }\r\n        }\r\n        if (direction === \"-y\") {\r\n            if (nY >= 0) {\r\n                if (xMaxes[nY] < xMaxes[coords.y] && coords.x > xMaxes[nY]) {\r\n                    if (xMaxes[nY]) {\r\n                        canMove = false;\r\n                        this.setState({\r\n                            coords: {\r\n                                x: xMaxes[nY],\r\n                                y: nY\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    canMove = true;\r\n                }\r\n            }\r\n            else {\r\n                canMove = false;\r\n                this.tryNavigateToNewCell(newCoords);\r\n            }\r\n        }\r\n        if (canMove) {\r\n            this.fireIndexChangeEvent(newCoords);\r\n        }\r\n        return canMove;\r\n    }\r\n    fireIndexChangeEvent(newCoords) {\r\n        const { activeCell } = this.state;\r\n        this.cellIndexChangeEvents[activeCell] &&\r\n            this.cellIndexChangeEvents[activeCell](newCoords);\r\n    }\r\n    tryNavigateToNewCell(newCoords) {\r\n        //  FIXME: Good god refine this\r\n        const { cells, grid, activeCell, activeCellCoords } = this.state;\r\n        const { nX, nY, direction } = newCoords;\r\n        let nextGridCoord = applyDirectionCoords({\r\n            nX: activeCellCoords.x,\r\n            nY: activeCellCoords.y,\r\n            direction\r\n        });\r\n        let nextCell = this.nextAvailableNeighboringCell(nextGridCoord);\r\n        if (nextCell) {\r\n            //  If name is the same it is a spanned cell\r\n            if (nextCell === activeCell) {\r\n                let nextCoords = applyCellDimensionOffsets({\r\n                    nX: activeCellCoords.x,\r\n                    nY: activeCellCoords.y,\r\n                    direction\r\n                }, cells[activeCell].height, cells[activeCell].width);\r\n                let nextNextCell = this.nextAvailableNeighboringCell(nextCoords);\r\n                if (nextNextCell) {\r\n                    this.setActiveCell(nextNextCell, direction);\r\n                }\r\n            }\r\n            else {\r\n                this.setActiveCell(nextCell, direction);\r\n            }\r\n        }\r\n    }\r\n    nextAvailableNeighboringCell(nextGridCoord) {\r\n        const { cells } = this.state;\r\n        let nextCell = undefined;\r\n        Object.keys(cells).forEach(cellName => {\r\n            let canNavigate = cells[cellName].gridPositions.reduce((acc, pos) => {\r\n                if (!acc) {\r\n                    if (pos.x === nextGridCoord.x && pos.y === nextGridCoord.y) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return acc;\r\n            }, false);\r\n            if (canNavigate) {\r\n                nextCell = cellName;\r\n            }\r\n        });\r\n        return nextCell;\r\n    }\r\n}\r\nexport default new FocusEngine();\r\n//# sourceMappingURL=FocusEngine.js.map","map":"{\"version\":3,\"file\":\"FocusEngine.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/FocusEngine.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rasbrits/Desktop/code/react-grid-navigator/FocusEngine.d.ts","writeByteOrderMark":false,"text":"import { Container } from \"./context\";\r\nimport { Coords, NewCoords } from \"./types\";\r\nimport Cell from \"./Cell\";\r\ndeclare class FocusEngine extends Container {\r\n    state: {\r\n        coords: {\r\n            x: 0;\r\n            y: 0;\r\n        };\r\n        activeCellCoords: {\r\n            x: 0;\r\n            y: 0;\r\n        };\r\n        grid: [];\r\n        cells: {\r\n            [key: string]: Cell;\r\n        };\r\n        activeCell: \"\";\r\n    };\r\n    cellFocusEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    cellBlurEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    cellIndexChangeEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    focusActions: {\r\n        [key: string]: Function;\r\n    };\r\n    constructor();\r\n    setGrid(gridNames: Array<[]>, activeCell: string): Promise<void> | void;\r\n    setActiveCell(newActiveCell: string, direction: string): void;\r\n    addCellCoords(cell: string, coords: Coords): void;\r\n    addCellFocusEvent(cellName: string, func: Function): void;\r\n    addCellBlurEvent(cellName: string, func: Function): void;\r\n    addCellIndexChangeEvent(cellName: string, func: Function): void;\r\n    addFocusAction(index: Array<number>, cellName: string, func: Function): void;\r\n    onArrowUp(): void;\r\n    onArrowDown(): void;\r\n    onArrowLeft(): void;\r\n    onArrowRight(): void;\r\n    onEnter(): void;\r\n    pipeMove(nX: number, nY: number): boolean;\r\n    applyNavLogic(newCoords: NewCoords): boolean;\r\n    fireIndexChangeEvent(newCoords: NewCoords): void;\r\n    tryNavigateToNewCell(newCoords: NewCoords): void;\r\n    nextAvailableNeighboringCell(nextGridCoord: Coords): undefined;\r\n}\r\ndeclare const _default: FocusEngine;\r\nexport default _default;\r\n"}}
