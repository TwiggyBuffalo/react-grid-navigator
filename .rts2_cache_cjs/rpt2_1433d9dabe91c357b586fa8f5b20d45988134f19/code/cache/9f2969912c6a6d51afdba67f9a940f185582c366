{"code":"export default class Cell {\r\n    constructor(name, gridPosition) {\r\n        this.getNextLogicalIndex = (direction) => {\r\n            if (direction === \"-x\") {\r\n                console.log(this.maxes);\r\n                if (Math.max(...this.maxes.xMaxes) === 0) {\r\n                    return {\r\n                        x: 0,\r\n                        y: 0\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        x: Math.max(...this.maxes.xMaxes),\r\n                        y: this.maxes.yMaxes[Math.max(...this.maxes.xMaxes)]\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n        };\r\n        this.coords = [];\r\n        this.name = name;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.gridPositions = [gridPosition];\r\n        this.maxes = { xMaxes: [], yMaxes: [] };\r\n    }\r\n    set setName(name) {\r\n        this.name = name;\r\n    }\r\n    set addGridPosition(coords) {\r\n        this.gridPositions.push(coords);\r\n        this.calculateDimensions();\r\n    }\r\n    set addCoords(coords) {\r\n        this.coords.push(coords);\r\n        this.calculateMaxes();\r\n        this.calculateDimensions();\r\n    }\r\n    calculateDimensions() {\r\n        let isHorizontal = this.gridPositions.every(coord => {\r\n            return coord.y === this.gridPositions[0].y;\r\n        });\r\n        let isVertical = this.gridPositions.every(coord => {\r\n            return coord.x === this.gridPositions[0].x;\r\n        });\r\n        if (isHorizontal) {\r\n            this.width = this.gridPositions.length;\r\n            this.height = Math.max(...this.gridPositions.map(pos => pos.x));\r\n        }\r\n        if (isVertical) {\r\n            this.height = this.gridPositions.length;\r\n            this.width = Math.max(...this.gridPositions.map(pos => pos.y));\r\n        }\r\n    }\r\n    calculateMaxes() {\r\n        this.coords.forEach(({ x, y }) => {\r\n            this.maxes = {\r\n                xMaxes: this.updateMaxes(this.maxes.xMaxes, y, x),\r\n                yMaxes: this.updateMaxes(this.maxes.yMaxes, x, y)\r\n            };\r\n        });\r\n    }\r\n    updateMaxes(maxes, targetIndex, effectIndex) {\r\n        if (maxes[targetIndex]) {\r\n            if (maxes[targetIndex] < effectIndex) {\r\n                maxes[targetIndex] = effectIndex;\r\n            }\r\n        }\r\n        else {\r\n            maxes[targetIndex] = effectIndex;\r\n        }\r\n        return maxes;\r\n    }\r\n}\r\n//# sourceMappingURL=Cell.js.map","map":"{\"version\":3,\"file\":\"Cell.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/Cell.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rasbrits/Desktop/code/react-grid-navigator/Cell.d.ts","writeByteOrderMark":false,"text":"import { Coords, Maxes } from \"./types\";\r\nexport default class Cell {\r\n    coords: Array<Coords>;\r\n    gridPositions: Array<Coords>;\r\n    name: string;\r\n    maxes: Maxes;\r\n    width: number;\r\n    height: number;\r\n    constructor(name: string, gridPosition: Coords);\r\n    set setName(name: string);\r\n    set addGridPosition(coords: Coords);\r\n    set addCoords(coords: Coords);\r\n    getNextLogicalIndex: (direction: string) => {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    calculateDimensions(): void;\r\n    calculateMaxes(): void;\r\n    updateMaxes(maxes: Array<number>, targetIndex: number, effectIndex: number): number[];\r\n}\r\n"}}
