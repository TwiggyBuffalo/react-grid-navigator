{"code":"import { Container } from \"unstated\";\r\nimport { getDirection, applyDirectionCoords, applyCellDimensionOffsets } from \"./methods\";\r\nimport Cell from \"./Cell\";\r\nclass FocusEngine extends Container {\r\n    constructor() {\r\n        super();\r\n        this.setGrid = (gridNames, activeCell) => {\r\n            let cells = {};\r\n            let grid = gridNames.map((rows, yIndex) => {\r\n                return rows.map((cellName, xIndex) => {\r\n                    if (cells[cellName]) {\r\n                        cells[cellName].addGridPosition = { x: xIndex, y: yIndex };\r\n                        return cells[cellName];\r\n                    }\r\n                    else {\r\n                        cells[cellName] = new Cell(cellName, { x: xIndex, y: yIndex });\r\n                        return cells[cellName];\r\n                    }\r\n                });\r\n            });\r\n            return this.setState({\r\n                grid,\r\n                cells,\r\n                activeCell,\r\n                activeCellCoords: cells[activeCell].gridPositions[0]\r\n            });\r\n        };\r\n        this.setActiveCell = (newActiveCell, direction) => {\r\n            const { cells, activeCell } = this.state;\r\n            this.cellFocusEvents[newActiveCell] &&\r\n                this.cellFocusEvents[newActiveCell]();\r\n            this.cellBlurEvents[activeCell] && this.cellBlurEvents[activeCell]();\r\n            this.setState({\r\n                activeCell: newActiveCell,\r\n                activeCellCoords: cells[newActiveCell].gridPositions[0],\r\n                coords: cells[newActiveCell].getNextLogicalIndex(direction)\r\n            });\r\n        };\r\n        this.addCellCoords = (cell, coords) => {\r\n            let { grid } = this.state;\r\n            let selectedCell = grid.reduce((acc, row) => {\r\n                if (!acc) {\r\n                    return row.find((item) => item.name === cell);\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n            }, null);\r\n            if (selectedCell) {\r\n                selectedCell.addCoords = coords;\r\n            }\r\n        };\r\n        this.addCellFocusEvent = (cellName, func) => {\r\n            this.cellFocusEvents[cellName] = func;\r\n        };\r\n        this.addCellBlurEvent = (cellName, func) => {\r\n            this.cellBlurEvents[cellName] = func;\r\n        };\r\n        this.addCellIndexChangeEvent = (cellName, func) => {\r\n            this.cellIndexChangeEvents[cellName] = func;\r\n        };\r\n        this.addFocusAction = (index, cellName, func) => {\r\n            this.focusActions[cellName + index.join()] = func;\r\n        };\r\n        this.onArrowUp = () => {\r\n            const { x, y } = this.state.coords;\r\n            if (this.pipeMove(x, y - 1)) {\r\n                this.setState({\r\n                    coords: {\r\n                        x,\r\n                        y: y - 1\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.onArrowDown = () => {\r\n            const { x, y } = this.state.coords;\r\n            if (this.pipeMove(x, y + 1)) {\r\n                this.setState({\r\n                    coords: {\r\n                        x,\r\n                        y: y + 1\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.onArrowLeft = () => {\r\n            const { x, y } = this.state.coords;\r\n            if (this.pipeMove(x - 1, y)) {\r\n                this.setState({\r\n                    coords: {\r\n                        x: x - 1,\r\n                        y\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.onArrowRight = () => {\r\n            const { x, y } = this.state.coords;\r\n            if (this.pipeMove(x + 1, y)) {\r\n                this.setState({\r\n                    coords: {\r\n                        x: x + 1,\r\n                        y\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.onEnter = () => {\r\n            const { coords, activeCell } = this.state;\r\n            this.focusActions[activeCell + [coords.x, coords.y].join()] &&\r\n                this.focusActions[activeCell + [coords.x, coords.y].join()]();\r\n        };\r\n        this.pipeMove = (nX, nY) => {\r\n            const { coords } = this.state;\r\n            let newCoords = {\r\n                nX,\r\n                nY,\r\n                direction: getDirection(nX, nY, coords.x, coords.y)\r\n            };\r\n            return this.applyNavLogic(newCoords);\r\n        };\r\n        this.applyNavLogic = (newCoords) => {\r\n            const { cells, activeCell } = this.state;\r\n            const { maxes } = cells[activeCell];\r\n            const { coords } = this.state;\r\n            const { nX, nY, direction } = newCoords;\r\n            const { xMaxes, yMaxes } = maxes;\r\n            let canMove = false;\r\n            if (direction === \"x\") {\r\n                if (xMaxes[coords.y] < nX) {\r\n                    canMove = false;\r\n                    this.tryNavigateToNewCell(newCoords);\r\n                }\r\n                else {\r\n                    canMove = true;\r\n                }\r\n            }\r\n            if (direction === \"-x\") {\r\n                if (nX >= 0) {\r\n                    canMove = true;\r\n                }\r\n                else {\r\n                    canMove = false;\r\n                    this.tryNavigateToNewCell(newCoords);\r\n                }\r\n            }\r\n            if (direction === \"y\") {\r\n                if (yMaxes[coords.x] < nY) {\r\n                    if (xMaxes[nY] < xMaxes[coords.y] && coords.x > xMaxes[nY]) {\r\n                        if (xMaxes[nY]) {\r\n                            canMove = false;\r\n                            this.setState({\r\n                                coords: {\r\n                                    x: xMaxes[nY],\r\n                                    y: nY\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        canMove = false;\r\n                        this.tryNavigateToNewCell(newCoords);\r\n                    }\r\n                }\r\n                else {\r\n                    canMove = true;\r\n                }\r\n            }\r\n            if (direction === \"-y\") {\r\n                if (nY >= 0) {\r\n                    if (xMaxes[nY] < xMaxes[coords.y] && coords.x > xMaxes[nY]) {\r\n                        if (xMaxes[nY]) {\r\n                            canMove = false;\r\n                            this.setState({\r\n                                coords: {\r\n                                    x: xMaxes[nY],\r\n                                    y: nY\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        canMove = true;\r\n                    }\r\n                }\r\n                else {\r\n                    canMove = false;\r\n                    this.tryNavigateToNewCell(newCoords);\r\n                }\r\n            }\r\n            if (canMove) {\r\n                this.fireIndexChangeEvent(newCoords);\r\n            }\r\n            return canMove;\r\n        };\r\n        this.fireIndexChangeEvent = (newCoords) => {\r\n            const { activeCell } = this.state;\r\n            this.cellIndexChangeEvents[activeCell] &&\r\n                this.cellIndexChangeEvents[activeCell](newCoords);\r\n        };\r\n        this.tryNavigateToNewCell = (newCoords) => {\r\n            //  FIXME: Good god refine this\r\n            const { cells, grid, activeCell, activeCellCoords } = this.state;\r\n            const { nX, nY, direction } = newCoords;\r\n            let nextGridCoord = applyDirectionCoords({\r\n                nX: activeCellCoords.x,\r\n                nY: activeCellCoords.y,\r\n                direction\r\n            });\r\n            let nextCell = this.nextAvailableNeighboringCell(nextGridCoord);\r\n            if (nextCell) {\r\n                //  If name is the same it is a spanned cell\r\n                if (nextCell === activeCell) {\r\n                    let nextCoords = applyCellDimensionOffsets({\r\n                        nX: activeCellCoords.x,\r\n                        nY: activeCellCoords.y,\r\n                        direction\r\n                    }, cells[activeCell].height, cells[activeCell].width);\r\n                    let nextNextCell = this.nextAvailableNeighboringCell(nextCoords);\r\n                    if (nextNextCell) {\r\n                        this.setActiveCell(nextNextCell, direction);\r\n                    }\r\n                }\r\n                else {\r\n                    this.setActiveCell(nextCell, direction);\r\n                }\r\n            }\r\n        };\r\n        this.nextAvailableNeighboringCell = (nextGridCoord) => {\r\n            const { cells } = this.state;\r\n            let nextCell = undefined;\r\n            Object.keys(cells).forEach(cellName => {\r\n                let canNavigate = cells[cellName].gridPositions.reduce((acc, pos) => {\r\n                    if (!acc) {\r\n                        if (pos.x === nextGridCoord.x && pos.y === nextGridCoord.y) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return acc;\r\n                }, false);\r\n                if (canNavigate) {\r\n                    nextCell = cellName;\r\n                }\r\n            });\r\n            return nextCell;\r\n        };\r\n        this.state = {\r\n            coords: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            activeCellCoords: { x: 0, y: 0 },\r\n            grid: [],\r\n            cells: {},\r\n            activeCell: \"\"\r\n        };\r\n        this.cellFocusEvents = {};\r\n        this.cellBlurEvents = {};\r\n        this.cellIndexChangeEvents = {};\r\n        this.focusActions = {};\r\n    }\r\n}\r\nexport default new FocusEngine();\r\n//# sourceMappingURL=FocusEngine.js.map","map":"{\"version\":3,\"file\":\"FocusEngine.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/FocusEngine.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rasbrits/Desktop/code/react-grid-navigator/FocusEngine.d.ts","writeByteOrderMark":false,"text":"import { Container } from \"unstated\";\r\nimport { Coords, NewCoords } from \"./types\";\r\ndeclare class FocusEngine extends Container<any> {\r\n    cellFocusEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    cellBlurEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    cellIndexChangeEvents: {\r\n        [key: string]: Function;\r\n    };\r\n    focusActions: {\r\n        [key: string]: Function;\r\n    };\r\n    constructor();\r\n    setGrid: (gridNames: [][], activeCell: string) => Promise<void>;\r\n    setActiveCell: (newActiveCell: string, direction: string) => void;\r\n    addCellCoords: (cell: string, coords: Coords) => void;\r\n    addCellFocusEvent: (cellName: string, func: Function) => void;\r\n    addCellBlurEvent: (cellName: string, func: Function) => void;\r\n    addCellIndexChangeEvent: (cellName: string, func: Function) => void;\r\n    addFocusAction: (index: number[], cellName: string, func: Function) => void;\r\n    onArrowUp: () => void;\r\n    onArrowDown: () => void;\r\n    onArrowLeft: () => void;\r\n    onArrowRight: () => void;\r\n    onEnter: () => void;\r\n    pipeMove: (nX: number, nY: number) => boolean;\r\n    applyNavLogic: (newCoords: NewCoords) => boolean;\r\n    fireIndexChangeEvent: (newCoords: NewCoords) => void;\r\n    tryNavigateToNewCell: (newCoords: NewCoords) => void;\r\n    nextAvailableNeighboringCell: (nextGridCoord: Coords) => undefined;\r\n}\r\ndeclare const _default: FocusEngine;\r\nexport default _default;\r\n"}}
